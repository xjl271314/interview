export default {
  roomId: 49363,
  userinfoUri: '2009231037jhvvnJ',
  type: 9,
  content: '',
  show: [],
  nowTime: 1624795480,
  data: [
    {
      buyerLevel: 1,
      messageContent: '',
      message_string: '',
      message_type: 9,
      roomId: 49363,
      send_platform: 'app',
      user_img:
        'https://cdn.weipaitang.com/sky/avatar/tupian/image/20210624/c04eb481580547dca3bf1409cf4601c7-W3375H3375',
      user_nickname: '\u6bb5\u8a89',
      user_uri: '1804021927l3j0iw',
      // render代表渲染什么组件
      render: {
        // props 或者 attrs 代表渲染组件接收的参数 或者代表渲染组件需要什么样的属性
        props: {
          //  background: '#000', // 组件背景色 默认是个黑色 可以简写为bg 这里是考虑用rgba代替16进制和alpha通道么?
          //  因为一般只有背景色会有透明度 比如bg: rgba(255,255,255,0.8);
          bg: '#fff',
          alp: 0.8, // 需要前端自己去处理转化rgba颜色
          color: '#F3E414', // 颜色（默认为白色）
          // font: 16, // 本期可以先不考虑 代表内容的字体大小，目前来看消息中的字体大小都是统一的 无需在fields中进行处理 单位pt
          // padding: 5, // 本期可以先不考虑 padding指的是该整个容器内部的间距 也可以缩写为pd，单位也是pt
          // margin: 5, // 本期可以先不考虑 margin一般是指两个组件之间的上下距离 一般都是一个数值 代表上个组件距下个组件之间的距离。单位也是pt
          // 目前组件的宽度和高度都是自适应的 都是由外层的容器宽度进行限制的
          // 针对这个情况 我们内部其实可以简写border属性
          // 比如 采用 宽度w:120、高度 h:100 边框粗细: bw: 1 边框颜色 bc: '#fff' 边框样式 bs: 'solid'
          // 可读性也相对较好
          bw: 1, // 边框宽度（单位：pt，1pt=2px。默认为0）
          bc: '#F3E414', // 边框颜色（默认为白色）
          radius: 10, // 圆角属性建议书写为radius方便理解 （默认为0）可以简写为r
          // 事件处理这块用click也行 用event也行 相对click而言event表示的范围可能更广一点 但是click比较直白
          // 或者定义为action 代表该组件有什么动作
          // 事件类型可以采用枚举的方式进行 使用0 1 2 3 这种感觉就可以了
          // 但是这块会不会存在点击直接跳转的场景 比如说点击整个跳转到商详页或者用户主页
          // 这时候链接是前端进行处理还是后端  思考了下应该是前端处理 毕竟路由不一致
          action: 1, // 0、无操作；1、弹出用户详情；2、我也分享；3、我也关注。 简写成act
        },
        // fields本身代表的是字段的意思 这里指的是该组件由哪些字段组件
        // 也可以修改为nodes 代表哪些节点 或者component 或者children、child
        // 长度和语义结合的话 推荐使用fileds、nodes、child
        nodes: [
          // 五种类型：头像、等级、昵称、文字消息、图片。（分别为key：1，2，3，4，5）
          // 头像、图片用url；文字昵称、文字消息用text；（文字昵称后面自己拼接：）等级用level。
          // 身份：主播00001、导播00010、用户自己00100、其他用户01000、场外记者10000。
          {
            key: 1, // 用户头像
            url: 'http://',
            act: 1, // 点击0、无操作；1、弹出用户头像；
            gap: '0', // gap代表该元素在上下左右之间的间距 按照CSS规范的顺序是上->右->下->左
            // 举个例子比如都是5 那么就是 5 如果上下5 左右是10 那么就是 5,10
            // 这个也不一定是这样 看各端UI表现上取一个比较兼容的写法 而且这样的话需要考虑外边距问题
            // 这个问题指的是a和b之间的间距可能是5 但是重复定义可能导致变成了10
            // 最终这个只考虑 左边的margin
          },
          {
            key: 2, // 用户等级
            level: 1, // 这块节约流量 是不是后端告诉我们用户等级是啥 各个端自己去匹配对应的等级图片呢?
            gap: '0',
            // 预估用户等级今后也没有什么交互操作吧
          },
          {
            key: 3, // 用户昵称
            text: '昵称',
            secret: 0, // secret 代表用户昵称是否需要进行脱敏处理 针对不同的平台 靠平台侧自己去处理是否本人和他人这块逻辑
            // 后端只透出该IM接口是否需要处理脱敏、加密即可
            gap: '0',
          },
          {
            key: 4, // 对应的文本消息
            text: '分享了直播间', // 这块不知道参与抽奖那块 豪掷5微豆参与抽奖是自己拼的还是下发的。
          },
          {
            key: 5, // 对应的图标等
            url: 'http://',
            w: 20,
            h: 20,
            action: 0,
            show: 0, // 该字段针对哪个端进行显示 具体的端说明参考身份模块
          },
        ],
      },
    },
  ],
  versionLimit: '',
};
